---
title: "Project2 by Pranav Nair in ST558"
format: html
editor: visual
---


```{r}
library(shiny)
library(httr)
library(jsonlite)
library(readr)
library(dplyr)
library(ggplot2)
library(ggheatmap)
library(tibble)

#Define the base URL link.

```

The API that I chose to utilize is the REST Countries API.  In this API, there is multiple points of data from different regions around the world, such as population.  To start off this project, I will create a function that can obtain the data from different countries by region.
```{r}


get_countries_by_region2 <- function(region, fields = NULL) {
  base_url <- "https://restcountries.com/v3.1/region/"
  url <- paste0(base_url, region)
  if (!is.null(fields)) {
    url <- paste0(url, "?fields=", fields)
  }
  
  response <- GET(url)
  
  if (status_code(response) != 200) {
    stop("Failed to retrieve data")
  }
  content <- fromJSON(content(response, "text", encoding = "UTF-8"), flatten = TRUE)
  return(as_tibble(content))
}

# Retrieve data for all countries in Europe
europe_data <- get_countries_by_region("Europe", fields = "name,population,area")

# Calculate population density
europe_data <- europe_data |>
  mutate(density = population / area)


# Example usage

region_data <- get_countries_by_region2("Europe", fields = "name,population")
print(region_data)


```
With this, the user should have the flexibility to choose a certain region.  Three parameters can be modified - fields, region, and name.


The next function should be to obtain the country data by the name of the country... i.e Germany.
```{r}
get_country_by_name <- function(country_name, fullText = NULL) {
  url_base <- paste0("https://restcountries.com/v3.1/name/", country_name)
  
  query_params <- list(fullText = fullText)
  
  result <- GET(url_base, query = query_params)
  
  if (status_code(result) == 200) {
    content <- content(result, "text", encoding = "UTF-8")
    content_json <- fromJSON(content, simplifyDataFrame = TRUE)
    country_data <- as_tibble(content_json)
    return(country_data)
  } else {
    stop("Country data retrieval failed.")
  }
}

  country_data <- get_country_by_name("Germany")
  print(country_data)
```
Great!  Looks like both functions work!


Here is the contingency table.
```{r}
#Contingency table
region_data <- get_countries_by_region2("Europe")
contingency_table <- table(region_data$region, region_data$subregion)
print(contingency_table)
```



Here is the numerical summary.
```{r}
#Njumerial summaries

region_data <- get_countries_by_region2("Europe", "name,population,area,region")
  summary_table <- region_data %>% 
    group_by(region) %>% 
    summarize(
      avg_population = mean(population, na.rm = TRUE),
      avg_area = mean(area, na.rm = TRUE),
      sd_population = sd(population, na.rm = TRUE),
      sd_area = sd(area, na.rm = TRUE)
    )
  print(summary_table)

```


Below are the four plots as requested in the project assignment.
```{r}
#Plot 1

ggplot(region_data, aes(x = area, y = population)) +
    geom_point() +
    labs(title = "Population vs. Area", x = "Area (sq km)", y = "Population") +
    theme_minimal()
```

```{r}
#Plot 2

  ggplot(region_data, aes(x = region, y = population, fill = region)) +
    geom_boxplot() +
    labs(title = "Population Distribution by Region", x = "Region", y = "Population") +
    theme_minimal()

```



```{r}
#Plot 3
  ggplot(region_data, aes(x = region, y = area, fill = region)) +
    geom_boxplot() +
    labs(title = "Area Distribution by Region", x = "Region", y = "Area (sq km)") +
    theme_minimal()

```


```{r}
#Plot 4

europe_data <- get_countries_by_region("Europe", fields = "name,population,area")

europe_data <- europe_data |>
  mutate(density = population / area)

  ggplot(europe_data, aes(x = reorder(name, density), y = density, fill = region)) +
    geom_bar(stat = "identity") +
    labs(title = "Population Density by Country", x = "Country", y = "Density (pop/sq km)") +
    theme_minimal()


```

